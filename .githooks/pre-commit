#!/bin/bash
# living-docs pre-commit hook
# Prevents documentation drift from entering the repository

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}ðŸ“š living-docs pre-commit check...${NC}"

# Check if drift detection script exists
if [ ! -f "./scripts/check-drift.sh" ]; then
    echo -e "${YELLOW}âš  Warning: check-drift.sh not found${NC}"
    echo "Skipping drift detection"
    exit 0
fi

# Run drift detection and auto-fix
echo "Checking for documentation drift..."
./scripts/check-drift.sh

# If drift was fixed, add the changes to this commit
if git diff --name-only | grep -q "docs/current.md"; then
    echo -e "${BLUE}â†’ Adding auto-fixed documentation to commit...${NC}"
    git add docs/current.md
    echo -e "${GREEN}âœ“ Documentation updates added to commit${NC}"
fi

# Check for new code files without documentation
echo ""
echo "Checking for undocumented code changes..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=AM)
NEW_CODE_FILES=()
MODIFIED_CODE_FILES=()

for file in $STAGED_FILES; do
    # Check if it's a code file (exclude docs, configs, etc.)
    if [[ "$file" =~ \.(js|ts|jsx|tsx|py|go|rs|java|cpp|c|h|hpp|sh)$ ]]; then
        if [ "$(git diff --cached --diff-filter=A --name-only | grep "$file")" ]; then
            NEW_CODE_FILES+=("$file")
        else
            MODIFIED_CODE_FILES+=("$file")
        fi
    fi
done

# Warn about new code files
if [ ${#NEW_CODE_FILES[@]} -gt 0 ]; then
    echo -e "${YELLOW}âš  New code files detected:${NC}"
    for file in "${NEW_CODE_FILES[@]}"; do
        echo "  - $file"

        # Check if there's a corresponding doc
        BASE_NAME=$(basename "$file" | sed 's/\.[^.]*$//')
        if ! grep -q "$BASE_NAME" docs/current.md 2>/dev/null; then
            echo -e "    ${YELLOW}â†’ Consider documenting in docs/active/${NC}"
        fi
    done
fi

# Check if docs were updated for modified code
if [ ${#MODIFIED_CODE_FILES[@]} -gt 0 ]; then
    # Check if any docs were also modified
    DOC_MODIFIED=$(echo "$STAGED_FILES" | grep -E "\.md$" | wc -l)

    if [ "$DOC_MODIFIED" -eq 0 ]; then
        echo -e "${YELLOW}âš  Code modified but no documentation updated${NC}"
        echo "Modified files:"
        for file in "${MODIFIED_CODE_FILES[@]}"; do
            echo "  - $file"
        done
        echo ""
        echo -e "${YELLOW}Consider updating relevant documentation${NC}"
    fi
fi

# Final check
echo ""
echo -e "${GREEN}âœ“ Pre-commit checks complete${NC}"
echo ""

# Note: We don't block the commit, just warn
# This maintains developer velocity while encouraging good habits
exit 0