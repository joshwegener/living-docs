name: Security Scanning

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # Job 1: CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Job 2: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
      if: hashFiles('**/package*.json') != ''

    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
        fi
      if: hashFiles('**/package*.json') != ''

    - name: Run npm audit
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate
        fi
      if: hashFiles('**/package*.json') != ''
      continue-on-error: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
      if: hashFiles('**/requirements*.txt', '**/Pipfile', '**/pyproject.toml') != ''

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install safety
      if: hashFiles('**/requirements*.txt', '**/Pipfile', '**/pyproject.toml') != ''

    - name: Run Python Safety check
      run: |
        if [ -f "requirements.txt" ]; then
          safety check --json --output safety-report.json || true
          safety check
        fi
      if: hashFiles('**/requirements*.txt', '**/Pipfile', '**/pyproject.toml') != ''
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          npm-audit-results.json
          safety-report.json
          trivy-results.sarif

  # Job 3: Secret Scanning
  secret-scan:
    name: Secret and Credential Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog
      run: |
        trufflehog git file://. --json --no-update > trufflehog-results.json || true

    - name: Install gitleaks
      run: |
        wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run gitleaks
      run: |
        gitleaks detect --source . --report-format json --report-path gitleaks-report.json --verbose || true

    - name: Check for secrets in environment
      run: |
        echo "Checking for common secret patterns..."
        # Check for common secret patterns in files
        find . -type f -name "*.sh" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.env*" -o -name "*.conf" -o -name "*.config" | \
        grep -v ".git" | \
        xargs grep -l -E "(password|secret|key|token|api_key)" | \
        head -20 > potential-secrets.txt || true

    - name: Upload secret scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: |
          trufflehog-results.json
          gitleaks-report.json
          potential-secrets.txt

  # Job 4: Shell Script Static Analysis
  shellcheck:
    name: Shell Script Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Find shell scripts
      run: |
        find . -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.ksh" -o -name "*.zsh" \) \
        -not -path "./.git/*" > shell-scripts.txt
        echo "Found shell scripts:"
        cat shell-scripts.txt

    - name: Run ShellCheck
      run: |
        if [ -s shell-scripts.txt ]; then
          echo "Running ShellCheck on found scripts..."
          shellcheck --format=json $(cat shell-scripts.txt) > shellcheck-results.json || true
          shellcheck $(cat shell-scripts.txt) || true
        else
          echo "No shell scripts found"
          echo "[]" > shellcheck-results.json
        fi

    - name: Check script permissions
      run: |
        echo "Checking script permissions..."
        find . -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.ksh" -o -name "*.zsh" \) \
        -not -path "./.git/*" -exec ls -la {} \; > script-permissions.txt

    - name: Upload ShellCheck results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: shellcheck-results
        path: |
          shellcheck-results.json
          script-permissions.txt
          shell-scripts.txt

  # Job 5: File Permission and Integrity Checks
  file-security:
    name: File Security and Integrity
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check file permissions
      run: |
        echo "=== Checking for world-writable files ==="
        find . -type f -perm -002 -not -path "./.git/*" > world-writable-files.txt || true

        echo "=== Checking for executable files ==="
        find . -type f -perm -111 -not -path "./.git/*" > executable-files.txt || true

        echo "=== Checking for SUID/SGID files ==="
        find . -type f \( -perm -4000 -o -perm -2000 \) -not -path "./.git/*" > suid-sgid-files.txt || true

    - name: Check for sensitive file patterns
      run: |
        echo "=== Checking for sensitive files ==="
        find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" \
        -o -name "*.jks" -o -name "*.keystore" -o -name "id_rsa" -o -name "id_dsa" \
        -o -name "*.env" -o -name ".env.*" -o -name "*.secret" \) \
        -not -path "./.git/*" > sensitive-files.txt || true

    - name: Generate checksums
      run: |
        echo "=== Generating checksums for critical files ==="
        find . -name "*.sh" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \
        -not -path "./.git/*" | \
        xargs sha256sum > file-checksums.txt 2>/dev/null || true

    - name: Check file ownership (where possible)
      run: |
        echo "=== File ownership check ==="
        ls -la . > file-ownership.txt

    - name: Upload file security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: file-security-results
        path: |
          world-writable-files.txt
          executable-files.txt
          suid-sgid-files.txt
          sensitive-files.txt
          file-checksums.txt
          file-ownership.txt

  # Job 6: Security Report Generation and Issue Creation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, shellcheck, file-security]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary - $(date)" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md

        # Check CodeQL results
        echo "### CodeQL Analysis" >> security-summary.md
        if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
          echo "✅ CodeQL analysis completed successfully" >> security-summary.md
        else
          echo "❌ CodeQL analysis failed or found issues" >> security-summary.md
        fi
        echo "" >> security-summary.md

        # Check dependency scan
        echo "### Dependency Vulnerability Scan" >> security-summary.md
        if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
          echo "✅ Dependency scan completed" >> security-summary.md
        else
          echo "⚠️ Dependency scan found vulnerabilities" >> security-summary.md
        fi

        # Process npm audit results if they exist
        if [ -f "vulnerability-reports/npm-audit-results.json" ]; then
          echo "#### NPM Audit Results" >> security-summary.md
          vulnerabilities=$(jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length' vulnerability-reports/npm-audit-results.json 2>/dev/null || echo "0")
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "⚠️ Found $vulnerabilities vulnerability types" >> security-summary.md
          else
            echo "✅ No npm vulnerabilities found" >> security-summary.md
          fi
        fi
        echo "" >> security-summary.md

        # Check secret scan
        echo "### Secret Scanning" >> security-summary.md
        if [ "${{ needs.secret-scan.result }}" == "success" ]; then
          # Check if secrets were found
          secret_count=0
          if [ -f "secret-scan-results/trufflehog-results.json" ]; then
            secret_count=$(jq '. | length' secret-scan-results/trufflehog-results.json 2>/dev/null || echo "0")
          fi
          if [ "$secret_count" -gt 0 ]; then
            echo "⚠️ Found $secret_count potential secrets" >> security-summary.md
          else
            echo "✅ No secrets detected" >> security-summary.md
          fi
        else
          echo "❌ Secret scanning failed" >> security-summary.md
        fi
        echo "" >> security-summary.md

        # Check ShellCheck
        echo "### Shell Script Analysis" >> security-summary.md
        if [ "${{ needs.shellcheck.result }}" == "success" ]; then
          if [ -f "shellcheck-results/shellcheck-results.json" ]; then
            issues=$(jq '. | length' shellcheck-results/shellcheck-results.json 2>/dev/null || echo "0")
            if [ "$issues" -gt 0 ]; then
              echo "⚠️ Found $issues ShellCheck issues" >> security-summary.md
            else
              echo "✅ No ShellCheck issues found" >> security-summary.md
            fi
          fi
        else
          echo "❌ ShellCheck analysis failed" >> security-summary.md
        fi
        echo "" >> security-summary.md

        # Check file security
        echo "### File Security" >> security-summary.md
        if [ "${{ needs.file-security.result }}" == "success" ]; then
          echo "✅ File security check completed" >> security-summary.md

          # Check for world-writable files
          if [ -f "file-security-results/world-writable-files.txt" ] && [ -s "file-security-results/world-writable-files.txt" ]; then
            ww_count=$(wc -l < file-security-results/world-writable-files.txt)
            echo "⚠️ Found $ww_count world-writable files" >> security-summary.md
          fi

          # Check for sensitive files
          if [ -f "file-security-results/sensitive-files.txt" ] && [ -s "file-security-results/sensitive-files.txt" ]; then
            sens_count=$(wc -l < file-security-results/sensitive-files.txt)
            echo "⚠️ Found $sens_count potentially sensitive files" >> security-summary.md
          fi
        else
          echo "❌ File security check failed" >> security-summary.md
        fi
        echo "" >> security-summary.md

        echo "## Recommendations" >> security-summary.md
        echo "- Review all flagged vulnerabilities" >> security-summary.md
        echo "- Update dependencies with known vulnerabilities" >> security-summary.md
        echo "- Remove or secure any exposed secrets" >> security-summary.md
        echo "- Fix ShellCheck issues for script security" >> security-summary.md
        echo "- Review file permissions and remove world-writable files" >> security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md

    - name: Check if critical issues found
      id: check-issues
      run: |
        critical_issues=false

        # Check for high severity npm vulnerabilities
        if [ -f "vulnerability-reports/npm-audit-results.json" ]; then
          high_vulns=$(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' vulnerability-reports/npm-audit-results.json 2>/dev/null || echo "0")
          if [ "$high_vulns" -gt 0 ]; then
            critical_issues=true
          fi
        fi

        # Check for secrets
        if [ -f "secret-scan-results/trufflehog-results.json" ]; then
          secret_count=$(jq '. | length' secret-scan-results/trufflehog-results.json 2>/dev/null || echo "0")
          if [ "$secret_count" -gt 0 ]; then
            critical_issues=true
          fi
        fi

        # Check for world-writable files
        if [ -f "file-security-results/world-writable-files.txt" ] && [ -s "file-security-results/world-writable-files.txt" ]; then
          critical_issues=true
        fi

        echo "critical_issues=$critical_issues" >> $GITHUB_OUTPUT

    - name: Create security issue
      if: steps.check-issues.outputs.critical_issues == 'true' && github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Read the security summary
          const summary = fs.readFileSync('security-summary.md', 'utf8');

          // Check if a security issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security',
            state: 'open'
          });

          const today = new Date().toISOString().split('T')[0];
          const existingIssue = issues.find(issue =>
            issue.title.includes('Security Scan Results') &&
            issue.title.includes(today)
          );

          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Scan Results - ${today}`,
              body: `# Automated Security Scan Results\n\n${summary}\n\n**Priority**: Critical security issues detected\n\n**Action Required**: Please review and address the security findings above.\n\n---\n*This issue was automatically created by the security scanning workflow.*`,
              labels: ['security', 'automated']
            });
          }

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${summary}`
          });

  # Job 7: OSSF Scorecard (Security best practices)
  ossf-scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Run analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true

    - name: Upload SARIF results to dependency graph
      uses: actions/upload-artifact@v4
      with:
        name: SARIF file
        path: results.sarif
        retention-days: 5

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif