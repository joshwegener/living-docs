# Bootstrap - AI Assistant Instructions

## üö® MANDATORY ENFORCEMENT RULES

### Before ANY Status Report
**YOU MUST RUN THESE COMMANDS FIRST:**
```bash
ls -la {{DOCS_PATH}}/active/        # See what's ACTUALLY active
ls -la {{DOCS_PATH}}/completed/     # See what's ACTUALLY done
head -20 {{BUGS_FILE}}              # See ACTUAL bugs
wc -l {{IDEAS_FILE}}                # Count ACTUAL ideas
```
**NEVER report status without running these commands first.**

### Before Claiming "Complete"
**YOU MUST VERIFY:**
```bash
# Is the file in completed/?
ls {{DOCS_PATH}}/completed/*feature-name*
# If no, IT'S NOT COMPLETE - move it first:
mv {{DOCS_PATH}}/active/XX-feature.md {{DOCS_PATH}}/completed/$(date +%Y-%m-%d)-feature.md
```

### Before Claiming "It Works"
**YOU MUST TEST:**
```bash
# Actually test the feature/command
# Show the output - if it fails, IT DOESN'T WORK
```

## üìä Project Dashboard
**@{{DOCS_PATH}}/current.md** - Complete project status, metrics, and documentation map

## üìã Status Reporting (WITH VERIFICATION)
When asked for project status:
1. **FIRST** run the verification commands above
2. **THEN** report based on what you actually see:
   - **Active Tasks**: Count from `ls {{DOCS_PATH}}/active/`
   - **Open Bugs**: Count from `grep "^- \[ \]" {{BUGS_FILE}} | wc -l`
   - **Ideas Backlog**: Count from `grep "^- \[ \]" {{IDEAS_FILE}} | wc -l`
   - **Recent Completions**: List from `ls -t {{DOCS_PATH}}/completed/ | head -5`
   - **Current Focus**: Based on active/ contents

## üìÅ Documentation Structure
```
/
‚îú‚îÄ‚îÄ {{AI_FILE}} (references this bootstrap)
‚îú‚îÄ‚îÄ {{BUGS_FILE}} (lightweight issue tracking)
‚îú‚îÄ‚îÄ {{IDEAS_FILE}} (feature backlog)
‚îî‚îÄ‚îÄ {{DOCS_PATH}}/
    ‚îú‚îÄ‚îÄ bootstrap.md (this file - AI instructions)
    ‚îú‚îÄ‚îÄ current.md (project dashboard)
    ‚îú‚îÄ‚îÄ log.md (one-liner updates)
    ‚îú‚îÄ‚îÄ active/ (current work)
    ‚îú‚îÄ‚îÄ completed/ (finished tasks)
    ‚îú‚îÄ‚îÄ issues/ (detailed bug specs)
    ‚îî‚îÄ‚îÄ procedures/ (how-to guides)
```

## üîÑ WORKFLOW GATES (MANDATORY CHECKPOINTS)

### ‚õî GATE 1: Starting Work
**BEFORE starting ANY task:**
```bash
# CHECK: Does the task exist in active/?
ls {{DOCS_PATH}}/active/*task-name*
# If NO: Create it first
echo "# Task Name\n\n**Status**: üü° In Progress\n" > {{DOCS_PATH}}/active/XX-task-name.md
```

### ‚õî GATE 2: When You Find a Bug
**IMMEDIATELY when discovering a bug:**
```bash
# ADD IT NOW - not later
echo "- [ ] Bug description" >> {{BUGS_FILE}}
# If critical, also create detailed spec
echo "# Bug Details" > {{DOCS_PATH}}/issues/critical-X-description.md
```

### ‚õî GATE 3: Completing Work
**BEFORE saying anything is "done":**
```bash
# 1. Move the file
mv {{DOCS_PATH}}/active/XX-feature.md {{DOCS_PATH}}/completed/$(date +%Y-%m-%d)-feature.md
# 2. Update the log
echo "$(date '+%I:%M %p') - ROLE: Completed feature-name" >> {{DOCS_PATH}}/log.md
# 3. If it fixed bugs, mark them in {{BUGS_FILE}}
```

### ‚õî GATE 4: Making Claims
**BEFORE claiming ANY feature/support:**
```bash
# TEST IT FIRST - verify it actually exists/works
# If NO: You DON'T support it - add to bugs instead
```

## ‚è∞ MOMENT TRIGGERS (When ‚Üí Then)

### Every 30 Minutes
**TRIGGER**: Timer/significant progress
**ACTION**: `git add -A && git commit -m "Progress: [specific description]"`

### After Writing Code
**TRIGGER**: New function/feature added
**ACTION**: `echo "$(date '+%I:%M %p') - ROLE: Added [feature]" >> {{DOCS_PATH}}/log.md`

### After Finding Issue
**TRIGGER**: Bug discovered
**ACTION**: `echo "- [ ] [Bug description]" >> {{BUGS_FILE}}`

### After Completing Task
**TRIGGER**: Task finished
**ACTION**: Move to completed/ with date prefix

## üîç TRUTH VERIFICATION PROTOCOL

### The Cardinal Rule
**"If you didn't verify it, you can't claim it."**

### Verification Commands By Claim Type

**"Feature X is complete"**
```bash
ls {{DOCS_PATH}}/completed/*feature-X*  # Must exist in completed/
```

**"We support Y"**
```bash
# Show working code/config that implements Y
```

**"No bugs with Z"**
```bash
grep "Z" {{BUGS_FILE}}  # Check if Z appears in bugs
```

**"X tasks in progress"**
```bash
ls {{DOCS_PATH}}/active/ | wc -l  # Count actual files
```

### Red Flags That You're Lying to Yourself
- ‚ùå Saying "complete" but file still in active/
- ‚ùå Claiming feature works but never tested it
- ‚ùå Reporting old status without checking current state
- ‚ùå Marking bugs fixed without verifying the fix
- ‚ùå Creating documentation without creating functionality

## üõ†Ô∏è Active Framework Rules
<!-- RULES_START -->
<!-- Framework-specific rules will be dynamically included here -->
<!-- RULES_END -->

## üéØ Key Principles (ENFORCED)
1. **Truth Over Optimism**: Report what IS, not what SHOULD BE
2. **Verify Before Claiming**: Run commands, see output, then speak
3. **Document As You Go**: Not after, not "later", but NOW
4. **If It's Not Tested, It's Broken**: Assume failure until proven
5. **Files Don't Lie**: Trust directory listings over memory

## ‚ö†Ô∏è FINAL WARNING
**Breaking these rules means living-docs becomes dead-docs. You created this system to prevent documentation drift. USE IT CORRECTLY.**

---
*This file enforces living-docs discipline. Ignore at your own peril.*